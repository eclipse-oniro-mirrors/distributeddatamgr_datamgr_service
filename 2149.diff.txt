diff --git a/services/distributeddataservice/service/udmf/store/runtime_store.cpp b/services/distributeddataservice/service/udmf/store/runtime_store.cpp
index 10fede9514788b53806574fb99c6ed88925370e8..af8da696b1b8f0fda2ef80387d5cece363884e57 100644
--- a/services/distributeddataservice/service/udmf/store/runtime_store.cpp
+++ b/services/distributeddataservice/service/udmf/store/runtime_store.cpp
@@ -278,18 +278,16 @@ Status RuntimeStore::Sync(const std::vector<std::string> &devices)
         }
         if (dbStatus != DBStatus::OK) {
             RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
-                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, dbStatus);
+                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, dbStatus, BizState::DFX_END);
         } else {
             RadarReporterAdapter::ReportNormal(std::string(__FUNCTION__),
-                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::SUCCESS, BizState::DFX_NORMAL_END);
+                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::SUCCESS, BizState::DFX_END);
         }
 
         ZLOGI("sync complete, %{public}s, status:%{public}d.", Anonymous::Change(storeId_).c_str(), dbStatus);
     };
     DBStatus status = kvStore_->Sync(syncDevices, SyncMode::SYNC_MODE_PULL_ONLY, onComplete);
     if (status != DBStatus::OK) {
-        RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
-            BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, status);
         ZLOGE("Sync kvStore failed, status: %{public}d.", status);
         return E_DB_ERROR;
     }
@@ -319,8 +317,6 @@ Status RuntimeStore::Sync(const std::vector<std::string> &devices, ProcessCallba
     option.isWait = false;
     DBStatus status = kvStore_->Sync(option, progressCallback);
     if (status != DBStatus::OK) {
-        RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
-            BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, status);
         ZLOGE("Sync kvStore failed, status: %{public}d.", status);
         return E_DB_ERROR;
     }
@@ -343,11 +339,11 @@ void RuntimeStore::NotifySyncProcss(const DevSyncProcessMap &processMap, Process
         if (syncProcess.errCode == DBStatus::OK) {
             processInfo.syncStatus = ASYNC_SUCCESS;
             RadarReporterAdapter::ReportNormal(std::string(__FUNCTION__),
-                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::SUCCESS, BizState::DFX_NORMAL_END);
+                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::SUCCESS, BizState::DFX_END);
         } else {
             processInfo.syncStatus = ASYNC_FAILURE;
             RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
-                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, syncProcess.errCode);
+                BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, syncProcess.errCode, BizState::DFX_END);
         }
     }
     callback(processInfo);
diff --git a/services/distributeddataservice/service/udmf/udmf_service_impl.cpp b/services/distributeddataservice/service/udmf/udmf_service_impl.cpp
index 76dff6831fb8eb7c49d521040bfeb77cd050707a..15ce3a150b96c36f104e7bead95e0548db147d16 100644
--- a/services/distributeddataservice/service/udmf/udmf_service_impl.cpp
+++ b/services/distributeddataservice/service/udmf/udmf_service_impl.cpp
@@ -210,6 +210,8 @@ int32_t UdmfServiceImpl::RetrieveData(const QueryOption &query, UnifiedData &uni
     if (key.intention == UD_INTENTION_MAP.at(UD_INTENTION_DRAG)) {
         int32_t ret = ProcessUri(query, unifiedData);
         if (ret != E_OK) {
+            RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
+                BizScene::GET_DATA, GetDataStage::GRANT_URI_PERMISSION, StageRes::FAILED, ret);
             ZLOGE("ProcessUri failed. ret=%{public}d", ret);
             return E_NO_PERMISSION;
         }
@@ -497,12 +497,16 @@ int32_t UdmfServiceImpl::Sync(const QueryOption &query, const std::vector<std::s
         BizScene::SYNC_DATA, SyncDataStage::SYNC_BEGIN, StageRes::IDLE, BizState::DFX_BEGIN);
     UnifiedKey key(query.key);
     if (!key.IsValid()) {
+        RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
+            BizScene::SYNC_DATA, SyncDataStage::SYNC_BEGIN, StageRes::FAILED, E_INVALID_PARAMETERS, BizState::DFX_END); 
         ZLOGE("Unified key: %{public}s is invalid.", query.key.c_str());
         return E_INVALID_PARAMETERS;
     }
 
     auto store = StoreCache::GetInstance().GetStore(key.intention);
     if (store == nullptr) {
+        RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
+            BizScene::SYNC_DATA, SyncDataStage::SYNC_BEGIN, StageRes::FAILED, E_DB_ERROR, BizState::DFX_END);
         ZLOGE("Get store failed, intention: %{public}s.", key.intention.c_str());
         return E_DB_ERROR;
     }
@@ -520,15 +524,15 @@ int32_t UdmfServiceImpl::Sync(const QueryOption &query, const std::vector<std::s
             syncingData_ = false;
         }
     };
+    RadarReporterAdapter::ReportNormal(std::string(__FUNCTION__),
+        BizScene::SYNC_DATA, SyncDataStage::SYNC_BEGIN, StageRes::SUCCESS);
     if (store->Sync(devices, callback) != E_OK) {
         syncingData_ = false;
         ZLOGE("Store sync failed, intention: %{public}s.", key.intention.c_str());
         RadarReporterAdapter::ReportFail(std::string(__FUNCTION__),
-            BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, E_DB_ERROR, BizState::DFX_ABNORMAL_END);
+            BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::FAILED, E_DB_ERROR, BizState::DFX_END);
         return E_DB_ERROR;
     }
-    RadarReporterAdapter::ReportNormal(std::string(__FUNCTION__),
-        BizScene::SYNC_DATA, SyncDataStage::SYNC_END, StageRes::SUCCESS, BizState::DFX_NORMAL_END);
     return E_OK;
 }
 
